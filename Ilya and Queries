/*
We iterate twice through the array to precompute each query result. First we iterate over the string and we store a +1 if the ith position is equal to the next one, 0 otherwhise.
Then we compute the prefix sum of this array of +1 and +0, after that for each possible query we just have to compute a subtraction to get the correct segment, that is the
right end - left end of the query.
Time complexity is O(n) since we iterate over string twice and space complexity  is O(n) since we just store the array of prefix sums.
*/

#include <iostream>
#include <string>

using namespace std;

void ilyaAndLion(pair<int, int> query[], int dim, string input) {
    int res[dim];
    int values[input.size()] = {0};
    int prefixSum[input.size()] = {0};
    for (int i = 0; i < input.size() - 1; i++) {
        if (input[i] == input[i + 1]) {
            values[i] = 1;
        }
    }

    prefixSum[0] = values[0];
    for (int i = 1; i < input.size(); i++) {
        prefixSum[i] = prefixSum[i - 1] + values[i];
    }

    for (int i = 0; i < dim; i++) {
        if (query[i].second - query[i].first == 1) {
            res[i] = values[query[i].second - 2];
        } else {
            if(query[i].first >=2){
            res[i] = prefixSum[query[i].second - 2] - prefixSum[query[i].first - 2];
            } else {
            res[i] = prefixSum[query[i].second - 2];
            }
        }
    }

    for (auto &e : res) {
        cout << e << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    int queries = 0;
    string input;
    cin >> input >> queries;
    pair<int, int> queryArr[queries];
    for (int i = 0; i < queries; ++i) {
        cin >> queryArr[i].first >> queryArr[i].second;
    }
    ilyaAndLion(queryArr, queries, input);
    return 0;
}
