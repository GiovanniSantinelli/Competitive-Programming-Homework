/*
Dynamic programming with a top-down recursive approach. We use a memorization matrix M of size(2)*(n) where n is the number of nodes.
For each node i the entry M[0][i] stores the minimum vertex cover not covering node i and entry M[1][i] considers the opposite case.
We visit the tree with a DFS, at each node i we can decide to cover it or not:
if we don't cover i, we must cover all of his children. Given the generic children j we add M[1][j] to M[0][i].
else we can choose to cover them or not. 
The minimum between these two cases is the actual value. Given the generic children j we add min(M[0][j], M[1][j]) to M[1][i].

The final answer will be min(M[0][0],M[1][0]) where 0 is the root node.
Time complexity is O(n) since we visit each node only once. Space complexity O(n) to store the answer for each node.
*/

#include <vector>
#include <iostream>
#include <algorithm>
#include <functional>
using namespace std;

int main()
{
    size_t n;
    cin >> n;
    vector<size_t> dp[2];
    vector<vector<size_t>> tree;
    tree = vector<vector<size_t>>(n);
    dp[0] = vector<size_t>(n, 0);
    dp[1] = vector<size_t>(n, 0);
    size_t u, v;
    for (size_t i = 0; i < n - 1; i++)
    {
        cin >> u >> v;
        tree[u - 1].push_back(v - 1);
        tree[v - 1].push_back(u - 1);
    }

    function<void(size_t, size_t)> vertex_cover = [&](size_t node, size_t parent) {
        for (auto child : tree[node])
        {
            if (child != parent)
            {
                vertex_cover(child, node);
                dp[0][node] += dp[1][child];
                dp[1][node] += min(dp[0][child], dp[1][child]);
            }
        }

        dp[1][node]++;
    };

    vertex_cover(0, -1);

    cout << min(dp[0][0], dp[1][0]) << endl;
    return 0;
}
