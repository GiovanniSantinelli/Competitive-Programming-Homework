/*
We use a deque that store the indexes of the elements, ordered by their value in decreasing order. At every iteration we remove from the front the elements that are no longer
in the window and from the back the elements that are smaller than the next value to be added, then we add the new element. At every iteration the top of the deque is the 
index of the maximum value of the current window. Complexity is O(n) since we remove and insert in the deque each  element just once resulting in a total of 2n operations. 
*/

vector<int> max_of_subarrays(int *arr, int n, int k) {
    std::deque<int> indexes(k);
    vector<int> res;
    res.reserve(n - (k - 1));

    int i;
    for (i = 0; i < k; ++i) {
        while ((!indexes.empty()) && arr[i] >= arr[indexes.back()]) {
            indexes.pop_back();
        }
        indexes.push_back(i);
    }

    for (; i < n; ++i) {
        res.push_back(arr[indexes.front()]);

        while ((!indexes.empty()) && indexes.front() <= i - k) {
            indexes.pop_front();
        }

        while ((!indexes.empty()) && arr[i] >= arr[indexes.back()]) {
            indexes.pop_back();
        }
        indexes.push_back(i);
    }
    res.push_back(arr[indexes.front()]);
    return res;
}
