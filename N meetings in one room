/*
Sort the meetings by their end time and then scan them: if a meeting does not overlap with the previous one, add 1 to the result.
Time complexity O(n*log n) since we have to sort them.
*/
static bool ord (pair<int,int> a, pair<int,int> b){
    return a.second != b.second ? a.second < b.second :
                        a.first < b.first;
}

int maxMeetings(int start[], int end[], int n) {
    vector<pair<int,int>> vec;
    int res = 1;
    for(int i = 0; i < n; i++){
        vec.push_back(make_pair(star[i],end[i]));
    }
    sort(vec.begin(),vec.end(),ord);
    int lastEndTime = vec[0].second;
    for(int i = 0; i < n; i++){
        if(vec[i].first > lastEndTime){
            res++;
            lastEndTime = vec[i].second;
        }
    }
    return res;
}
