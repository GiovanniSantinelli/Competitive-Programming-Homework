#include <iostream>
#include <vector>
#include <queue>

using namespace std;

/* We iteratate through the entire vector just once keeping track of the Max value and of the ActualMax. At each iteration we compute the difference from two consecutive values,
if this difference is > Max, then we update the Max. The reasoning is that we can't have a "strenght" that is less than the Max since we wouldn't be able to make that jump.
The ActualMax keeps track of the times we have to make a jump that is == to the Max, so we have to decrease the Max by 1. So ActualMax keep the "strenght" updated each time we
have to make a jump that is == to the ActualMax. Then we can face the case in which we have just to update the Max because there is a jump bigger than the previous Max, and
situations where we have to make a jump larger than the ActualMax but not larger than the Max, in this case we just have to increase the Max by 1 and to "refresh" the ActualMax.
The number of comparisons we do should be O(n) since for each element (n) we make a comparison with the ActualMax (O(1)).
*/
int main(int argc, char *argv[]) {
    int tests;
    cin >> tests;
    vector<int> result;
    for(int i=0;i<tests;++i){
        int elements;
        cin >> elements;
        int firstElement;  //at the first iteration this is 0
        int secondElement; //at the first iteration, this is the first element in the vector
        cin >> secondElement;
        if(elements==1){
            result.push_back(secondElement);
            continue;
        }
        
        int Max = secondElement;   //Max is the greater difference between two consecutive elements seen so far
        int ActualMax = Max - 1;   //This is the updated value of Max, each time we make a jump of this quantity, it's decreased
        int diff;                   //The difference between each two consecutive elements

        for(int i=0;i<elements-1;++i){
            firstElement = secondElement;
            cin >> secondElement;
            diff = secondElement - firstElement;

            if (diff == ActualMax){
                ActualMax--;
            } else if(diff > ActualMax && diff > Max){
                Max = diff;
                ActualMax = Max - 1;
            } else if (diff > ActualMax && diff <= Max){
                Max++;
                ActualMax = Max;
            }
        }

        result.push_back(Max);
    }


    for(int i=0;i<result.size();++i){
        cout << "Case " << i+1 << ": " << result[i] << endl;
    }
	return 0;
    
}
