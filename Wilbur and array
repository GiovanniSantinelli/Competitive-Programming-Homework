/*
Scan the entire array and each time count the difference between the current number and the previous one, sum all those differences and that will be the answer.
Time complexity is O(n) where n is the length of the array.
*/

#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <unordered_map>
#include <vector>
using namespace std;

int64_t wilbur(int64_t n, vector<int64_t> vec) {
    int64_t prev = 0;
    int64_t steps = 0;
    for (int64_t i = 0; i < vec.size(); i++) {
        steps += abs(vec[i] - prev);
        prev = vec[i];
    }
    return steps;
}

int main() {
    ios_base::sync_with_stdio(false);
    int64_t n;
    cin >> n;
    vector<int64_t> vec;
    vec.reserve(n);
    for (int64_t i = 0; i < n; i++) {
        int64_t tmp;
        cin >> tmp;
        vec.push_back(tmp);
    }
    int64_t res = wilbur(n, vec);
    cout << res << endl;
    return 0;
}
