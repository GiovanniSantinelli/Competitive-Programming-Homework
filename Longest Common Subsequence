/*
Using DP we compute the subproblems that here ask to compute the LCS of prefixes of the two sequences: given two prefixes S_1[1,i] and S_2[1,j], our goal is to compute 
LCS(S_1[1,i], S_2[1,j]). We can summarize the possible situations in three cases:
The LCS(S_1[1,i], S_2[1,j]) is:
- 0                                                         --> if i = 0 or j = 0;
- LCS(S_1[1,i-1], S_2[1,j-1]) + 1                           --> if S[i] == S[j];
- max(LCS(S_1[1,i-1], S_2[1,j]), LCS(S_1[1,i], S_2[1,j-1])) --> otherwise; 
Time complexity is O(n*m) where n and m are the lenths of the two strings.
*/

int lcs(int x, int y, string s1, string s2) {
    int matrix[x + 1][y + 1] = {0};
    for (int i = 1; i < x + 1; i++) {
        matrix[i][0] = 0;
    }
    for (int i = 1; i < y + 1; i++) {
        matrix[0][i] = 0;
    }

    for (int i = 1; i < x + 1; i++) {
        for (int j = 1; j < y + 1; j++) {
            if (s1[i - 1] == s2[j - 1]) {
                matrix[i][j] = matrix[i - 1][j - 1] + 1;
            } else {
                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1]);
            }
        }
    }
    return matrix[x][y];
}
