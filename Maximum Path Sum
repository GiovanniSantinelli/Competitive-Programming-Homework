/*
We can use post-order traversal, for every node find the maximum root to leaf sum in left and right subtree and add these two values with the value in the node. After
this, check the maximum path sum found so far and update it if needed.
O(n) to traverse each node of the tree.
*/

int maxSum(Node* n,int &maxsum){
    if(n == NULL){
        return 0;
    }
    if(n->right&&n->left){
        int l = maxSum(n->left,maxsum);
        int r = maxSum(n ->right, maxsum);
        maxsum = std::max(maxsum, l+r+n->data);
        return n->data + max(l,r);
    }
    else {
        return (!n->left)? maxSum(n ->right, maxsum) + n->data: 
                           maxSum(n ->left, maxsum) + n->data; 
    }    
} 
int maxPathSum(Node* root)
{   
    int maxsum = INT_MIN;
    maxSum(root,maxsum);
    return maxsum;
}
