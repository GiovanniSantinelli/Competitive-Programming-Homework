/*
We store the position of the frogs in a BST. When a mosquito lands on position b, to know which frog eats it we simply do a predecessor(b) query on the tree.
This base solution needs to be adjusted to account for three main issues:
overlapping segments, each frog can cover the segment(p, p+tongue). To enforce that the leftmost frog has the priority on the landing mosquito we preprocess the 
segments to force no overlap. If two frogs share a common segment the rightmost frog gets moved and is assigned the segment (r+1, r+1+tongue) where r is the maximum 
distance reached by the tongue of the left frog.
Dynamic segments, when a frog eats it's tongue grows which means that it now can cover a longer segment.This new segment might fully 
contain other segments (found with a successor query). In this case we simply delete the contained segments from the tree(this frog can never eat).
If the new segment partially overlaps with another we reuse the solution used for the first issue. 
Uneaten mosquitoes, a mosquito may be uneaten when it first lands. We store uneaten mosquitoes in another BST.
When a frog eats we check on this tree if the frog can eat other mosquitoes. This can be found with a successor query.

Assume that we have n frogs and m mosquitoes.
Each predecessor query on the frog tree can be answered in O(log n) time.
Forcing no overlap in the starting segments takes O(n).
Changing dynamic segments has an overall complexity of O((n+m)log n) time because the initial segments are not overlapping and remove n segments at most.
Searching for uneaten mosquitoes takes O( m log m) time overall because we can search for a maximum of m mosquitoes.
Space complexity is O(n) to store the two trees.
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
 
struct frog
{
    int64_t pos, reach, i,eaten_m;
 
    frog(int64_t pos, int64_t reach, int64_t i, int64_t eaten_m): pos(pos), reach(reach), i(i), eaten_m(eaten_m){}
};
 
struct mosquito
{
    int64_t land_pos, val;
 
    mosquito(int64_t land_pos,int64_t val) : land_pos(land_pos), val(val){}
};
 
void frogs_and_mosquitoes(vector<frog> frogs, vector<mosquito> mosquitoes){
    map<int64_t, frog> pond;
    multimap<int64_t, int64_t> uneaten;
    
    
    sort(frogs.begin(), frogs.end(), [&](frog &f1, frog &f2){return f1.pos < f2.pos; });
    pond.insert({frogs[0].pos, frogs[0]});
    int64_t curr_end = frogs[0].reach;
    for(int i = 1; i < frogs.size(); i++){
         if(frogs[i].reach > curr_end)
        {
            
            pond.insert({max(curr_end+1, frogs[i].pos), frogs[i]});
            curr_end= frogs[i].reach;
        }
        
    }
    sort(frogs.begin(), frogs.end(),[&](frog &f1, frog &f2){return f1.i < f2.i;});
 
    for( mosquito &m : mosquitoes){
        
        auto f = pond.upper_bound(m.land_pos);
        f = prev(f);
        auto next_m = uneaten.insert({m.land_pos,m.val});
        while (f != pond.end() && next_m != uneaten.end()
                && f->first <= next_m->first && next_m->first <=f->second.reach)
        {
            f->second.reach += next_m->second;
            frogs[f->second.i].reach += next_m->second;
            frogs[f->second.i].eaten_m++;
            next_m = uneaten.erase(next_m);
            
        }
        if (f != pond.end())
        {
            auto curr_reach = f->second.reach;
            for(++f;f !=pond.end() && f->first <= curr_reach;){
                auto frog = f->second;
                f = pond.erase(f);
                if (frog.reach > curr_reach)
                {
                    pond.insert({curr_reach+1,frog});
                    curr_reach = frog.reach;
                }
                
            }
        }
        
        
    }
 
    
    for(auto &f : frogs) cout << f.eaten_m << " " << f.reach - f.pos << endl;
 
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    vector<frog> frogs;
    frogs.reserve(n);
    int64_t x, t;
    for(int i = 0; i < n; i++){
        cin >> x >> t;
        frogs.emplace_back(x, x+t,i,0);
    }
    vector<mosquito> mosquitoes;
    mosquitoes.reserve(m);
    for(int i = 0; i < m; i++){
        cin >> x >> t;
        mosquitoes.emplace_back(x,t);
    }
 
    frogs_and_mosquitoes(frogs, mosquitoes);
}
